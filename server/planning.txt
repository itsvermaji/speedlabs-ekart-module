Changes:
Admin - https://www.getpostman.com/collections/43d1b1712d274aa1b2c6
Users - https://www.getpostman.com/collections/70ad9a9ead6e5e0fb822

Updated collections
Admin/orders
Users/orders
Users/Cart/Razorpay
Users/Cart/checkout
Users/Products/Purchased Products

Achieved Goals:
1. successfull Payment using .env secret
2. Orders History user and admin both sides.
3. Access to purchased product.

Changes:
1. Free/Paid attribute added to the content.
2. Marketplace, Categories route for user side.
3. All Categories route, All products, Products details can be viewd without Auth for user/admin both.
Pending:
1. Payment verification using .env secret and order_id.


Changes: 
1. Applied coupon on a cart item is now stored as coupon_id instead of coupon_code which will prove advantageous in case of updating coupon name.
2. tot_coupons_used Field added to the database table and made functional.
3. price_before_coupon filed added into the cart_contents table.
4. Status codes of all the responses of 80+ responses added.
5. Update coupon api Fixed.
6. "cart_content, user_carts" product_prices changed to decimal(8, 2).
7. 2 student details apis added and 3 left
8. Shared Marketplace removed from student side, only products from joined institute are visible.

1. rating_and total_ratings removed from the front end.
3. categories logic needs to be improved.

TODO: 
2. create api for sales/orders (both admin and user side) and payment.
4. work on content type (test and live class).
5. Student api.

TODO:
1. add Content Type field in products.
2. Make categories open for admin, users.


Orders Database Table: 
order_id, invoice_number, user_id, published_by, product_id, coupon id, order_status(active, pending, processed),  method_of_payment, from_bank_ac, to_bank_ac, net price, Date.

Order Details Response: 
user_name, student_institute_name, course_name, published_by, coupon applied, net price, Date, all transaction details (method_of_payment, which bank to which bank)
order_status: active, pending, processed, Date.

PRODUCT_CONTENT:
id, product_id, section_name, video_name, video_url, rating, created_at.

Points to Remember
1. Check for the keywords in package.json.
2. Right now the tot_students attribute in product section is filled by admin, later on it will be dynamically handled.

USER_AUTH: 
1. If users insert the user_inst_id which is not in the database, respond that as a bad request.
2. Then, the user details are stored to the database.
3. Simultaneously, the unique cart_id for that user is also stored in the database.

DELETE_USER:
1. Before deleting the user, clear all its purchases, carts, cart_contents.
2. Then delete user.


COUPONS Logic:
Admin:
1. user_id should be among institute's students.
2. Valid from date should not exceed valid till date.
3. valid from date should not be prior to the current date of creating coupon.
4. Valid till should be atleast more than current date.
5. Capitalize the coupon while creating.
6. Discount percent and discount_amt can't be applied at the same time.
7. Discount amount cannot exceed the product_discounted price.
8. Coupon can only be redeemed for once for particular user.
9. After a successfull purchase the coupon code will be deleted!
10. Coupon names should be unique for an institute.
FILTER: for deleting expired coupons.

COUPON REDEEM:
1. Check if the quantity is greater than 0.
2. Coupon Code matches.
3. Course belongs to the registered institute.
4. Label is active.
5. Not expired.

6.If product is removed from the cart then first the coupon quantity is restored.

A student redeems a coupon { product id is passed on which coupn is applied in url, first institute is verified, coupn code is also passed along with url, then quantity, label and expiry is checked, then the net price is reduced.}

CART Logic:
1. First check if the cart has been created for that user.
    1.1. Check if the product the user enterd exists in the cart!
    1.1. If has been add then check if the product has already been added to the cart.
    1.2. If product has not been added yet, then add the product to the cart_details table.
2. If cart has not been listed in the user_carts table, 
    2.1. Then First Create it.
    2.2. Then Go to point 1.2.
3. After each add to cart operation check the total price.

Order details:
1. Only That product can be ordered if it is not in the Orders history.